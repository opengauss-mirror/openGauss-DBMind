# Copyright (c) 2022 Huawei Technologies Co.,Ltd.
#
# openGauss is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#
#          http://license.coscl.org.cn/MulanPSL2
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.

pg_db:
  name: pg_db
  desc: OpenGauss database statistics
  query: |-
    SELECT 
      d.datid, 
      d.datname, 
      xact_commit, 
      xact_rollback,
      blks_read, 
      blks_hit, 
      (blks_hit / (blks_read + blks_hit + 0.001)) AS blks_access,
      tup_returned, 
      tup_fetched, 
      tup_inserted, 
      tup_updated, 
      tup_deleted, 
      conflicts, 
      temp_files, 
      temp_bytes,
      deadlocks, 
      blk_read_time, 
      blk_write_time,
      CASE WHEN (stats_reset IS NULL) THEN - 1 ELSE extract(epoch from pg_catalog.now() - stats_reset)::bigint END AS reset_delay, 
      confl_tablespace, 
      confl_lock, 
      confl_snapshot, 
      confl_bufferpin, 
      confl_deadlock
    FROM 
      pg_catalog.pg_stat_database d, pg_catalog.pg_stat_database_conflicts pdc
    WHERE 
      pdc.datname = d.datname 
      AND 
      d.datname NOT IN ('postgres', 'opengauss', 'template0', 'template1', 'templatem', 'templatea', 'template_pdb');
  metrics:
    - name: datid
      description: OID of a database
      usage: LABEL
    - name: datname
      description: Name of this database
      usage: LABEL
    - name: xact_commit
      description: Number of transactions in this database that have been committed
      usage: COUNTER
    - name: xact_rollback
      description: Number of transactions in this database that have been rolled back
      usage: COUNTER
    - name: blks_read
      description: Number of disk blocks read in this database
      usage: COUNTER
    - name: blks_hit
      description: Number of times disk blocks were found already in the buffer cache, so that a read was not necessary (this only includes hits in the buffer cache, not the operating system's file system cache)
      usage: COUNTER
    - name: blks_access
      description: hit rate of database
      usage: GAUGE
    - name: tup_returned
      description: Number of rows returned by queries in this database
      usage: COUNTER
    - name: tup_fetched
      description: Number of rows fetched by queries in this database
      usage: COUNTER
    - name: tup_inserted
      description: Number of rows inserted by queries in this database
      usage: COUNTER
    - name: tup_updated
      description: Number of rows updated by queries in this database
      usage: COUNTER
    - name: tup_deleted
      description: Number of rows deleted by queries in this database
      usage: COUNTER
    - name: conflicts
      description: Number of queries canceled due to conflicts with recovery in this database. (Conflicts occur only on standby servers, see pg_stat_database_conflicts for details.)
      usage: COUNTER
    - name: temp_files
      description: Number of temporary files created by queries in this database. All temporary files are counted, regardless of why the temporary file was created (e.g., sorting or hashing), and regardless of the log_temp_files setting.
      usage: COUNTER
    - name: temp_bytes
      description: Total amount of data written to temporary files by queries in this database. All temporary files are counted, regardless of why the temporary file was created, and regardless of the log_temp_files setting.
      usage: COUNTER
    - name: deadlocks
      description: Number of deadlocks detected in this database
      usage: COUNTER
    - name: blk_read_time
      description: Time spent reading data file blocks by backends in this database, in milliseconds
      usage: COUNTER
    - name: blk_write_time
      description: Time spent writing data file blocks by backends in this database, in milliseconds
      usage: COUNTER
    - name: reset_delay
      description: Time at which these statistics were last reset
      usage: GAUGE
    - name: confl_tablespace
      description: Number of queries in this database that have been canceled due to dropped tablespaces
      usage: COUNTER
    - name: confl_lock
      description: Number of queries in this database that have been canceled due to lock timeouts
      usage: COUNTER
    - name: confl_snapshot
      description: Number of queries in this database that have been canceled due to old snapshots
      usage: COUNTER
    - name: confl_bufferpin
      description: Number of queries in this database that have been canceled due to pinned buffers
      usage: COUNTER
    - name: confl_deadlock
      description: Number of queries in this database that have been canceled due to deadlocks
      usage: COUNTER
  status: enable
  ttl: 0
  timeout: 9


pg_connections:
  name: pg_connections
  desc: OpenGauss database connections
  query: |-
    SELECT 
      t1.used_conn, t2.enqueue_sql, t3.idle_session, t4.max_conn, t1.used_conn / t4.max_conn AS used_rate
    FROM 
      (SELECT pg_catalog.count(*) used_conn FROM pg_catalog.pg_stat_activity) t1,
      (SELECT pg_catalog.count(*) enqueue_sql FROM pg_catalog.pg_stat_activity WHERE enqueue IS NOT NULL) t2,
      (SELECT pg_catalog.count(*) idle_session FROM pg_catalog.pg_stat_activity WHERE state='idle') t3,
      (SELECT setting AS max_conn FROM pg_catalog.pg_settings WHERE name = 'max_connections') t4;
  metrics:
    - name: used_conn
      description: count of used connections
      usage: GAUGE
    - name: idle_session
      description: idle session number
      usage: GAUGE
    - name: max_conn
      description: max connection of database
      usage: GAUGE
    - name: enqueue_sql
      description: running sql
      usage: GAUGE
    - name: used_rate
      description: the rate of used connections to max connections
      usage: GAUGE

  status: enable
  ttl: 60
  timeout: 1


pg_session_connection:
  name: pg_session_connection
  desc: OpenGauss backend activity group by state
  query: |-
    SELECT
      coorname,
      pg_catalog.count(*) as total_session_num,
      sum(case when state = 'active' then 1 else 0 end) as active_session_num,
      sum(case when state = 'idle in transaction' then 1 else 0 end) as idle_session_num,
      sum(case when state = 'active' and pg_catalog.now() - query_start > interval '5 second' then 1 else 0 end) as active_query_session_num,
      sum(case when pg_catalog.now() - xact_start > interval '5 second' then 1 else 0 end) as long_session_num,
      sum(case when state = 'idle in transaction' and pg_catalog.now() - state_change > interval '5 second' then 1 else 0 end) as long_idle_session_num,
      sum(case when waiting ='t' then 1 else 0 end) as wait_session_num,
      sum(case when waiting ='t' and pg_catalog.now() - state_change > interval '5 second' then 1 else 0 end) as long_wait_session_num
    FROM
      dbe_perf.global_session_stat_activity
    GROUP BY 
      coorname;
  metrics:
    - name: coorname
      description: client address
      usage: LABEL
    - name: total_session_num
      description: session state
      usage: GAUGE
    - name: active_session_num
      description: session state
      usage: LABEL
    - name: idle_session_num
      description: session state
      usage: LABEL
    - name: active_query_session_num
      description: session state
      usage: LABEL
    - name: long_session_num
      description: session state
      usage: LABEL
    - name: long_idle_session_num
      description: session state
      usage: LABEL
    - name: wait_session_num
      description: session state
      usage: LABEL
    - name: long_wait_session_num
      description: session state
      usage: LABEL
  status: disable
  ttl: 60
  timeout: 1


# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ┃ pg_downstream
# ┃ openGauss replication client count group by state
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ TTL      ┆ 60
# ┃ Timeout  ┆ 100ms
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ LABEL    state                          downstream state
# ┃ GAUGE    count                          downstream count
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ pg_downstream_count{state}  GAUGE    downstream count
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_downstream:
  name: pg_downstream
  desc: openGauss replication client count group by state
  query: |-
    SELECT 
      l.state, COALESCE(count, 0) AS count
    FROM 
      pg_catalog.unnest(ARRAY ['Streaming', 'Startup', 'Catchup', 'Backup', 'Stopping']) l(state)
      LEFT JOIN 
      (SELECT state, pg_catalog.count(*) AS count FROM pg_catalog.pg_stat_replication GROUP BY state) r
      ON l.state = r.state;
  metrics:
    - name: state
      description: downstream state
      usage: LABEL
    - name: count
      description: downstream count
      usage: GAUGE
  status: disable
  ttl: 60
  timeout: 1


# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ┃ pg_stat_replication
# ┃
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ TTL      ┆ 60
# ┃ Timeout  ┆ 1s
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ LABEL    pid                            unique walsender pid
# ┃ LABEL    client_addr                    client address of wal receiver
# ┃ LABEL    application_name               application name of standby
# ┃ LABEL    state                          replication state startup|catchup|streaming|backup|stopping
# ┃ LABEL    sync_state                     replication sync state async|potential|sync|quorum
# ┃ COUNTER  lsn                            current log position on this server
# ┃ GAUGE    sent_diff                      last log position sent to this standby server diff with current lsn
# ┃ GAUGE    write_diff                     last log position written to disk by this standby server diff with current lsn
# ┃ GAUGE    flush_diff                     last log position flushed to disk by this standby server diff with current lsn
# ┃ GAUGE    replay_diff                    last log position replayed into the database on this standby server diff with current lsn
# ┃ COUNTER  sent_lsn                       last log position sent to this standby server
# ┃ COUNTER  write_lsn                      last log position written to disk by this standby server
# ┃ COUNTER  flush_lsn                      last log position flushed to disk by this standby server
# ┃ COUNTER  replay_lsn                     last log position replayed into the database on this standby server
# ┃ GAUGE    write_lag                      latest ACK lsn diff with write (sync-remote-write lag)
# ┃ GAUGE    flush_lag                      latest ACK lsn diff with flush (sync-remote-flush lag)
# ┃ GAUGE    replay_lag                     latest ACK lsn diff with replay (sync-remote-apply lag)
# ┃ GAUGE    backend_uptime                 how long since standby connect to this server
# ┃ GAUGE    backend_xmin                   this standby's xmin horizon reported by hot_standby_feedback.
# ┃ GAUGE    sync_priority                  priority of being chosen as synchronous standby
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ pg_stat_replication_lsn{pid,client_addr,application_name,state,sync_state}             COUNTER  current log position on this server
# ┃ pg_stat_replication_sent_diff{pid,client_addr,application_name,state,sync_state}       GAUGE    last log position sent to this standby server diff with current lsn
# ┃ pg_stat_replication_write_diff{pid,client_addr,application_name,state,sync_state}      GAUGE    last log position written to disk by this standby server diff with current lsn
# ┃ pg_stat_replication_flush_diff{pid,client_addr,application_name,state,sync_state}      GAUGE    last log position flushed to disk by this standby server diff with current lsn
# ┃ pg_stat_replication_replay_diff{pid,client_addr,application_name,state,sync_state}     GAUGE    last log position replayed into the database on this standby server diff with current lsn
# ┃ pg_stat_replication_sent_lsn{pid,client_addr,application_name,state,sync_state}        COUNTER  last log position sent to this standby server
# ┃ pg_stat_replication_write_lsn{pid,client_addr,application_name,state,sync_state}       COUNTER  last log position written to disk by this standby server
# ┃ pg_stat_replication_flush_lsn{pid,client_addr,application_name,state,sync_state}       COUNTER  last log position flushed to disk by this standby server
# ┃ pg_stat_replication_replay_lsn{pid,client_addr,application_name,state,sync_state}      COUNTER  last log position replayed into the database on this standby server
# ┃ pg_stat_replication_write_lag{pid,client_addr,application_name,state,sync_state}       GAUGE    latest ACK lsn diff with write (sync-remote-write lag)
# ┃ pg_stat_replication_flush_lag{pid,client_addr,application_name,state,sync_state}       GAUGE    latest ACK lsn diff with flush (sync-remote-flush lag)
# ┃ pg_stat_replication_replay_lag{pid,client_addr,application_name,state,sync_state}      GAUGE    latest ACK lsn diff with replay (sync-remote-apply lag)
# ┃ pg_stat_replication_backend_uptime{pid,client_addr,application_name,state,sync_state}  GAUGE    how long since standby connect to this server
# ┃ pg_stat_replication_backend_xmin{pid,client_addr,application_name,state,sync_state}    GAUGE    this standby's xmin horizon reported by hot_standby_feedback.
# ┃ pg_stat_replication_sync_priority{pid,client_addr,application_name,state,sync_state}   GAUGE    priority of being chosen as synchronous standby
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_stat_replication:
  name: pg_stat_replication
  query: |-
    SELECT 
      pid,
      client_addr,
      application_name,
      state,
      sync_state,
      lsn,
      lsn - sent_lsn AS sent_diff,
      lsn - write_lsn AS write_diff,
      lsn - flush_lsn AS flush_diff,
      lsn - replay_lsn AS replay_diff,
      sent_lsn,
      write_lsn,
      flush_lsn,
      replay_lsn,
      replay_lag,
      backend_uptime,
      sync_priority
    FROM (
      SELECT 
        pr.pid,
        client_addr,
        application_name,
        pr.state,
        pr.sync_state,
        pg_catalog.pg_xlog_location_diff(CASE WHEN pg_catalog.pg_is_in_recovery() THEN pg_catalog.pg_last_xlog_receive_location() ELSE pg_catalog.pg_current_xlog_location() END, '0/0') AS lsn,
        pg_catalog.pg_xlog_location_diff(pr.sender_sent_location, '0/0') AS sent_lsn,
        pg_catalog.pg_xlog_location_diff(pr.receiver_write_location, '0/0') AS write_lsn,
        pg_catalog.pg_xlog_location_diff(pr.receiver_flush_location, '0/0') AS flush_lsn,
        pg_catalog.pg_xlog_location_diff(pr.receiver_replay_location, '0/0') AS replay_lsn,
        pg_catalog.pg_xlog_location_diff(pr.receiver_replay_location, pg_current_xlog_location()) AS replay_lag,
        extract(epoch from pg_catalog.NOW() - backend_start) AS backend_uptime,
        pr.sync_priority
      FROM 
        pg_catalog.pg_stat_replication pr
    );
  metrics:
    - name: pid
      description: unique walsender pid
      usage: LABEL
    - name: client_addr
      description: client address of wal receiver
      usage: LABEL
    - name: application_name
      description: application name of standby
      usage: LABEL
    - name: state
      description: replication state startup|catchup|streaming|backup|stopping
      usage: LABEL
    - name: sync_state
      description: replication sync state async|potential|sync|quorum
      usage: LABEL
    - name: lsn
      description: current log position on this server
      usage: COUNTER
    - name: sent_diff
      description: last log position sent to this standby server diff with current lsn
      usage: GAUGE
    - name: write_diff
      description: last log position written to disk by this standby server diff with current lsn
      usage: GAUGE
    - name: flush_diff
      description: last log position flushed to disk by this standby server diff with current lsn
      usage: GAUGE
    - name: replay_diff
      description: last log position replayed into the database on this standby server diff with current lsn
      usage: GAUGE
    - name: sent_lsn
      description: last log position sent to this standby server
      usage: COUNTER
    - name: write_lsn
      description: last log position written to disk by this standby server
      usage: COUNTER
    - name: flush_lsn
      description: last log position flushed to disk by this standby server
      usage: COUNTER
    - name: replay_lsn
      description: last log position replayed into the database on this standby server
      usage: COUNTER
    - name: replay_lag
      description: latest ACK lsn diff with replay (sync-remote-apply lag)
      usage: GAUGE
    - name: backend_uptime
      description: how long since standby connect to this server
      usage: GAUGE
    - name: sync_priority
      description: priority of being chosen as synchronous standby
      usage: GAUGE
  status: disable
  ttl: 60
  timeout: 1


# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ┃ pg_replication_slots
# ┃
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ TTL      ┆ 60
# ┃ Timeout  ┆ 1s
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ LABEL    slot_name                      Slot name
# ┃ LABEL    plugin                         Logical plugin
# ┃ LABEL    slot_type                      Slot type
# ┃ LABEL    datoid                         Database oid
# ┃ LABEL    database                       Database name
# ┃ LABEL    active                         Is active
# ┃ LABEL    xmin                           replication xid
# ┃ LABEL    catalog_xmin                   logical decode xid
# ┃ GAUGE    restart_lsn                    Xlog info
# ┃ GAUGE    delay_lsn                      delay lsn from pg_current_xlog_location()
# ┃ DISCARD  dummy_standby                  Is real standby
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ pg_replication_slots_delay_lsn{slot_name,plugin,slot_type,datoid,database,active,xmin,catalog_xmin,restart_lsn}  GAUGE    delay lsn from pg_current_xlog_location()
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_replication_slots:
  name: pg_replication_slots
  query: |-
    SELECT 
      slot_name,
      database AS datname,
      COALESCE(plugin, '_') AS plugin,
      slot_type, 
      datoid, 
      COALESCE(database, '_') AS database,
      active,
      COALESCE(xmin, '_') AS xmin,
      COALESCE(catalog_xmin, '_') AS catalog_xmin,
      CASE WHEN pg_catalog.pg_is_in_recovery() THEN -1 ELSE pg_catalog.pg_xlog_location_diff(pg_catalog.pg_current_xlog_location(), restart_lsn) END AS delay_lsn,
      dummy_standby,
      pg_catalog.pg_xlog_location_diff(restart_lsn ,'0/0'::text) AS restart_lsn,
      pg_catalog.pg_xlog_location_diff(CASE WHEN pg_catalog.pg_is_in_recovery() THEN pg_catalog.pg_last_xlog_receive_location() ELSE pg_catalog.pg_current_xlog_location() END, restart_lsn) AS retained_bytes
    FROM 
      pg_catalog.pg_replication_slots;
  metrics:
    - name: slot_name
      description: Slot name
      usage: LABEL
    - name: plugin
      description: Logical plugin
      usage: LABEL
    - name: slot_type
      description: Slot type
      usage: LABEL
    - name: datoid
      description: Database oid
      usage: LABEL
    - name: database
      description: Database name
      usage: LABEL
    - name: active
      description: Is active
      usage: LABEL
    - name: xmin
      description: replication xid
      usage: LABEL
    - name: catalog_xmin
      description: logical decode xid
      usage: LABEL
    - name: restart_lsn
      description: Xlog info
      usage: GAUGE
    - name: delay_lsn
      description: delay lsn from pg_current_xlog_location()
      usage: GAUGE
    - name: dummy_standby
      description: Is real standby
      usage: DISCARD
  status: disable
  ttl: 60
  timeout: 1


# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ┃ pg_database
# ┃ OpenGauss Database size
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ TTL      ┆ 60
# ┃ Timeout  ┆ 1s
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ LABEL    datname                        Name of this database
# ┃ GAUGE    size_bytes                     Disk space used by the database
# ┃ GAUGE    age                            database age calculated by pg_catalog.age(datfrozenxid64)
# ┃ GAUGE    is_template                    1 for template db and 0 for normal db
# ┃ GAUGE    allow_conn                     1 allow connection and 0 does not allow
# ┃ GAUGE    conn_limit                     connection limit, -1 for no limit
# ┃ GAUGE    frozen_xid                     tuple with xmin below this will always be visable (until wrap around)
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ pg_database_size_bytes{datname}   GAUGE    Disk space used by the database
# ┃ pg_database_age{datname}          GAUGE    database age calculated by pg_catalog.age(datfrozenxid64)
# ┃ pg_database_is_template{datname}  GAUGE    1 for template db and 0 for normal db
# ┃ pg_database_allow_conn{datname}   GAUGE    1 allow connection and 0 does not allow
# ┃ pg_database_conn_limit{datname}   GAUGE    connection limit, -1 for no limit
# ┃ pg_database_frozen_xid{datname}   GAUGE    tuple with xmin below this will always be visable (until wrap around)
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_database:
  name: pg_database
  desc: OpenGauss Database size
  query: |-
    SELECT 
      datname, pg_catalog.pg_database_size(pg_database.datname) / 1024 / 1024 AS size_bytes
    FROM 
      pg_catalog.pg_database
    WHERE 
      datname NOT IN ('template0', 'template1', 'templatem', 'templatea', 'template_pdb');
  metrics:
    - name: datname
      description: Name of this database
      usage: LABEL
    - name: size_bytes
      description: Disk space used by the database
      usage: GAUGE
  status: enable
  ttl: 30
  timeout: 9


# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ┃ pg_checkpoint
# ┃ checkpoint information from pg_control_checkpoint since 10
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ TTL      ┆ 5
# ┃ Timeout  ┆ 1s
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ COUNTER  checkpoint_lsn                 lsn of checkpoint
# ┃ COUNTER  redo_lsn                       redo start LSN
# ┃ GAUGE    tli                            current WAL timeline
# ┃ GAUGE    prev_tli                       previous WAL timeline
# ┃ GAUGE    full_page_writes               is full page write enabled ?
# ┃ GAUGE    next_xid_epoch                 next xid epoch since this checkpoint
# ┃ GAUGE    next_xid                       next xid since this checkpoint
# ┃ GAUGE    next_oid                       next object id since this checkpoint
# ┃ GAUGE    next_multixact_id              next multixact id of this checkpoint
# ┃ GAUGE    next_multi_offset              next multixact id offset of this checkpoint
# ┃ GAUGE    oldest_xid                     oldest existing xid of the checkpoint
# ┃ GAUGE    oldest_xid_dbid                which db contains the oldest xid
# ┃ GAUGE    oldest_active_xid              oldest active xid of the checkpoint
# ┃ GAUGE    oldest_multi_xid               oldest active multi xid of the checkpoint
# ┃ GAUGE    oldest_multi_dbid              which db contins the oldest multi xid
# ┃ GAUGE    oldest_commit_ts_xid           xid with oldest commit ts by the checkpoint
# ┃ GAUGE    newest_commit_ts_xid           xid with newest commit ts by the checkpoint
# ┃ GAUGE    time                           timestamp of this checkpoint
# ┃ GAUGE    elapse                         time elapsed since this checkpoint in seconds
# ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# ┃ pg_checkpoint_checkpoint_lsn{}        COUNTER  lsn of checkpoint
# ┃ pg_checkpoint_redo_lsn{}              COUNTER  redo start LSN
# ┃ pg_checkpoint_tli{}                   GAUGE    current WAL timeline
# ┃ pg_checkpoint_prev_tli{}              GAUGE    previous WAL timeline
# ┃ pg_checkpoint_full_page_writes{}      GAUGE    is full page write enabled ?
# ┃ pg_checkpoint_next_xid_epoch{}        GAUGE    next xid epoch since this checkpoint
# ┃ pg_checkpoint_next_xid{}              GAUGE    next xid since this checkpoint
# ┃ pg_checkpoint_next_oid{}              GAUGE    next object id since this checkpoint
# ┃ pg_checkpoint_next_multixact_id{}     GAUGE    next multixact id of this checkpoint
# ┃ pg_checkpoint_next_multi_offset{}     GAUGE    next multixact id offset of this checkpoint
# ┃ pg_checkpoint_oldest_xid{}            GAUGE    oldest existing xid of the checkpoint
# ┃ pg_checkpoint_oldest_xid_dbid{}       GAUGE    which db contains the oldest xid
# ┃ pg_checkpoint_oldest_active_xid{}     GAUGE    oldest active xid of the checkpoint
# ┃ pg_checkpoint_oldest_multi_xid{}      GAUGE    oldest active multi xid of the checkpoint
# ┃ pg_checkpoint_oldest_multi_dbid{}     GAUGE    which db contins the oldest multi xid
# ┃ pg_checkpoint_oldest_commit_ts_xid{}  GAUGE    xid with oldest commit ts by the checkpoint
# ┃ pg_checkpoint_newest_commit_ts_xid{}  GAUGE    xid with newest commit ts by the checkpoint
# ┃ pg_checkpoint_time{}                  GAUGE    timestamp of this checkpoint
# ┃ pg_checkpoint_elapse{}                GAUGE    time elapsed since this checkpoint in seconds
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_checkpoint:
  name: pg_checkpoint
  desc: checkpoint information from pg_control_checkpoint since 10
  query: |-
    SELECT 
      checkpoint_lsn,
      redo_lsn,
      timeline_id AS tli,
      full_page_writes,
      next_oid::bigint,
      next_multixact_id::text::bigint,
      next_multi_offset::text::bigint,
      oldest_xid::text::bigint,
      oldest_xid_dbid::text::bigint,
      oldest_active_xid::text::bigint,
      checkpoint_time AS time,
      extract(epoch from pg_catalog.now() - checkpoint_time) AS elapse
    FROM 
      pg_catalog.pg_control_checkpoint();
  metrics:
    - name: checkpoint_lsn
      description: lsn of checkpoint
      usage: COUNTER
    - name: redo_lsn
      description: redo start LSN
      usage: COUNTER
    - name: tli
      description: current WAL timeline
      usage: GAUGE
    - name: full_page_writes
      description: is full page write enabled ?
      usage: GAUGE
    - name: next_oid
      description: next object id since this checkpoint
      usage: GAUGE
    - name: next_multixact_id
      description: next multixact id of this checkpoint
      usage: GAUGE
    - name: next_multi_offset
      description: next multixact id offset of this checkpoint
      usage: GAUGE
    - name: oldest_xid
      description: oldest existing xid of the checkpoint
      usage: GAUGE
    - name: oldest_xid_dbid
      description: which db contains the oldest xid
      usage: GAUGE
    - name: oldest_active_xid
      description: oldest active xid of the checkpoint
      usage: GAUGE
    - name: time
      description: timestamp of this checkpoint
      usage: GAUGE
    - name: elapse
      description: time elapsed since this checkpoint in seconds
      usage: GAUGE
  status: disable
  ttl: 5
  timeout: 1


pg_stat_activity:
  name: pg_stat_activity
  desc: OpenGauss backend activity group by state
  query: |-
    SELECT 
      datname, state, pg_catalog.COUNT(*) AS count
    FROM 
      pg_catalog.pg_stat_activity
    GROUP BY 
      state, datname;
  metrics:
    - name: datname
      description: Name of this database
      usage: LABEL
    - name: state
      description: connection state
      usage: LABEL
    - name: count
      description: number of connections in this state
      usage: GAUGE
  status: enable
  ttl: 60
  timeout: 1


pg_node_info:
  name: pg_node_info
  desc: the information of current node
  query: |-
    SELECT 
      current_catalog AS datname, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 'Y' ELSE 'N' END AS is_slave,
      node_name, installpath, datapath, log_directory,
      extract(epoch from pg_catalog.now() - pg_catalog.pg_postmaster_start_time()) AS uptime,
      pg_catalog.version() as version,
      pg_catalog.working_version_num() as working_version_num
    FROM 
      pg_catalog.pg_stat_get_env();
  metrics:
    - name: is_slave
      description: is slave node?
      usage: LABEL
    - name: node_name
      description: node name
      usage: LABEL
    - name: installpath
      description: install path
      usage: LABEL
    - name: datapath
      description: data path
      usage: LABEL
    - name: log_directory
      description: log dir path
      usage: LABEL
    - name: uptime
      description: uptime
      usage: GAUGE
    - name: version
      description: database version
      usage: LABEL
    - name: working_version_num
      description: database version number
      usage: LABEL
    - name: datname
      description: current connecting database
      usage: LABEL
  status: enable
  ttl: 3600
  timeout: 1


pg_stat_bgwriter:
  name: pg_stat_bgwriter
  desc: the bgwriter information of current node
  query: |-
    SELECT 
      COALESCE((checkpoint_sync_time/(CASE WHEN (checkpoints_timed + checkpoints_req) > 0 THEN (checkpoints_timed + checkpoints_req) ELSE 1 END)), 0) AS checkpoint_avg_sync_time,
      COALESCE((checkpoints_req/(CASE WHEN (checkpoints_timed + checkpoints_req) > 0 THEN (checkpoints_timed + checkpoints_req) ELSE 1 END)), 0) AS checkpoint_proactive_triggering_ratio,
      checkpoint_sync_time / 1000 AS total_seconds 
    FROM 
      pg_catalog.pg_stat_bgwriter;
  metrics:
    - name: total_seconds
      description: total sync time of checkpoints
      usage: GAUGE
    - name: checkpoint_avg_sync_time
      description: checkpoint_avg_sync_time
      usage: GAUGE
    - name: checkpoint_proactive_triggering_ratio
      description: checkpoint_proactive_triggering_ratio
      usage: GAUGE
  status: disable
  ttl: 3600
  timeout: 1


pg_locker:
  name: pg_locker
  desc: OpenGauss locker count
  query: |-
    WITH tl AS (
      SELECT 
        usename, granted, locktag, query_start, query
      FROM 
        pg_catalog.pg_locks l, pg_catalog.pg_stat_activity a
      WHERE 
        l.pid = a.pid 
        AND 
        locktag IN (SELECT locktag FROM pg_catalog.pg_locks WHERE granted = 'f')
    )
    SELECT 
      usename, query_start, granted, query, pg_catalog.count(query) count
    FROM 
      tl 
    WHERE 
      granted = 't' 
    GROUP BY 
      usename, query_start, granted, query 
    ORDER BY 
      5 DESC;
  metrics:
    - name: usename
      description: locker user name
      usage: LABEL
    - name: granted
      description: locker granted
      usage: LABEL
    - name: query_start
      description: locker query start
      usage: LABEL
    - name: count
      description: locker user count
      usage: GAUGE
    - name: query
      description: locker query
      usage: LABEL
  status: disable
  timeout: 9
  ttl: 10


pg_wait_events:
  name: pg_wait_events
  desc: OpenGauss wait event statements
  query: |-
    SELECT 
      nodename, type, event, total_wait_time 
    FROM 
      dbe_perf.global_wait_events 
    WHERE 
      wait > 0;
  metrics:
    - name: nodename
      description: Name of node
      usage: LABEL
    - name: type
      description: Type of wait events
      usage: LABEL
    - name: event
      description: Event name
      usage: LABEL
    - name: total_wait_time
      description: Total wait times
      usage: GAUGE
  status: disable
  ttl: 10
  timeout: 9


pg_lock_sql:
  name: pg_lock_sql
  desc: OpenGauss lock sqls
  query: |-
    WITH tl AS (
      SELECT 
        usename, granted, locktag, query_start, query
      FROM 
        pg_catalog.pg_locks l, pg_catalog.pg_stat_activity a
      WHERE 
        l.pid = a.pid 
        AND 
        locktag IN (SELECT locktag FROM pg_catalog.pg_locks WHERE granted = 'f')
    )
    SELECT 
      ts.usename locker_user, ts.query_start locker_query_start, ts.granted locker_granted,
      ts.query locker_query, tt.query locked_query, tt.query_start locked_query_start,
      tt.granted locked_granted, tt.usename locked_user,
      extract(epoch from pg_catalog.NOW() - tt.query_start) AS locked_times
    FROM 
      (SELECT * FROM tl WHERE granted = 't') AS ts, 
      (SELECT * FROM tl WHERE granted = 'f') tt
    WHERE 
      ts.locktag = tt.locktag 
    ORDER BY 
      1;
  metrics:
    - name: locker_user
      description: locker user
      usage: LABEL
    - name: locked_user
      description: locked user
      usage: LABEL
    - name: locker_granted
      description: locker granted
      usage: LABEL
    - name: locked_granted
      description: locked granted
      usage: LABEL
    - name: locker_query_start
      description: locker query start
      usage: LABEL
    - name: locked_query_start
      description: locked query start
      usage: LABEL
    - name: locked_times
      description: Total wait times
      usage: GAUGE
    - name: locker_query
      description: locker query
      usage: LABEL
    - name: locked_query
      description: locked query
      usage: LABEL
  status: disable
  ttl: 10
  timeout: 1


pg_session_memory:
  name: pg_session_memory
  desc: OpenGauss session use memory information
  query: |-
    SELECT 
      sessionid,
      COALESCE(application_name, '') AS application_name,
      COALESCE(client_addr::text, '') AS client_addr,
      SUM(usedsize)::bigint AS usedsize,
      SUM(totalsize)::bigint AS totalsize
    FROM 
      pg_catalog.{session_memory_detail} session_memory_detail, pg_catalog.pg_stat_activity stat
    WHERE 
      pg_catalog.split_part(sessid, '.', 2) = stat.sessionid
    GROUP BY 
      sessionid, query, application_name, client_addr
    ORDER BY 
      pg_catalog.SUM(totalsize) DESC
    LIMIT 10;
  metrics:
    - name: sessionid
      description: sessionid
      usage: LABEL
    - name: application_name
      description: application name
      usage: LABEL
    - name: client_addr
      description: client addr
      usage: LABEL
    - name: usedsize
      description: session used memory
      usage: GAUGE
    - name: totalsize
      description: session total memory
      usage: GAUGE
  status: disable
  ttl: 60
  timeout: 9


pg_sesstype_memory:
  name: pg_sesstype_memory
  desc: OpenGauss context use memory information
  query: |-
    SELECT 
      sesstype AS name, COUNT(1) AS count, SUM(totalsize) AS totalsize 
    FROM 
      pg_catalog.{session_memory_detail} 
    GROUP BY 
      sesstype;
  metrics:
    - name: name
      description: name of sesstype
      usage: LABEL
    - name: count
      description: total number of contexts
      usage: GAUGE
    - name: totalsize
      description: session total memory
      usage: GAUGE
  status: disable
  ttl: 10
  timeout: 9


pg_memory_context:
  name: pg_memory_context
  desc: memory context information for postgres
  query: |-
    SELECT 
      pg_catalog.split_part(parent, '_', 1) AS name, pg_catalog.COUNT(1) AS count, pg_catalog.SUM(totalsize) AS totalsize
    FROM 
      pg_catalog.{session_memory_detail} 
    WHERE 
      sesstype = 'postgres' 
    GROUP BY 
      name;
  metrics:
    - name: name
      description: name of sesstype
      usage: LABEL
    - name: count
      description: total number of contexts
      usage: GAUGE
    - name: totalsize
      description: session total memory
      usage: GAUGE
  status: disable
  ttl: 10
  timeout: 9


pg_state_memory:
  name: pg_state_memory
  desc: OpenGauss session state use memory information
  query: |-
    SELECT 
      state, pg_catalog.SUM(totalsize)::bigint AS totalsize
    FROM 
      pg_catalog.{session_memory_detail} m, pg_catalog.pg_stat_activity a
    WHERE 
      pg_catalog.split_part(sessid, '.', 2) = a.sessionid
      AND 
      pid != pg_catalog.pg_backend_pid()
    GROUP BY 
      state;
  metrics:
    - name: state
      description: session state
      usage: LABEL
    - name: totalsize
      description: session state total memory
      usage: GAUGE
  status: disable
  ttl: 600
  timeout: 9


pg_cpu_load:
  name: pg_cpu_load
  desc: OpenGauss cpu load
  query: SELECT pg_catalog.total_cpu() total_cpu;
  metrics:
    - name: total_cpu
      description: total cpu use
      usage: GAUGE
  status: enable
  ttl: 10
  timeout: 1


pg_recovery_status:
  name: pg_recovery_status
  desc: pg recovery status
  query: |-
    SELECT 
      standby_node_name, current_sleep_time, current_rto 
    FROM 
      dbe_perf.global_recovery_status;
  metrics:
    - name: standby_node_name
      description: node name
      usage: LABEL
    - name: current_sleep_time
      description: current sleep time
      usage: LABEL
    - name: current_rto
      description: current rto
      usage: GAUGE
  status: disable
  ttl: 10
  timeout: 1


pg_stat_get_wal_senders:
  name: pg_stat_get_wal_senders
  desc: pg stat get wal senders
  query: |-
    SELECT 
      pid, sender_flush_location, receiver_replay_location, 
      pg_catalog.pg_xlog_location_diff(sender_flush_location, receiver_replay_location) AS xlog_location_diff 
    FROM 
      pg_catalog.pg_stat_get_wal_senders();
  metrics:
    - name: pid
      description: pid
      usage: GAUGE
    - name: sender_flush_location
      description: sender flush location
      usage: LABEL
    - name: receiver_replay_location
      description: receiver replay location
      usage: LABEL
    - name: xlog_location_diff
      description: xlog_location_diff
      usage: LABEL
  status: disable
  ttl: 10
  timeout: 1


statement_responsetime_percentile:
  name: statement_responsetime_percentile
  desc: statement responsetime percentile
  query: |-
    SELECT 
      p80 / 1000 AS p80, p95 / 1000 AS p95 
    FROM 
      dbe_perf.statement_responsetime_percentile;
  metrics:
    - name: p80
      description: 80percent SQL rt
      usage: GAUGE
    - name: p95
      description: 95percent SQL rt
      usage: GAUGE
  status: enable
  ttl: 10
  timeout: 1


pg_prepared_xacts:
  name: pg_prepared_xacts
  desc: the information of current node
  query: |-
    SELECT 
      pg_catalog.count(1) AS count 
    FROM 
      pg_catalog.pg_prepared_xacts;
  metrics:
    - name: count
      description: current_prepared_xacts_count
      usage: GAUGE
  status: disable
  ttl: 10
  timeout: 1


pg_lock_time_info:
  name: pg_lock_time_info
  desc: pg_lock_time_info
  query: |-
    SELECT 
      d.datname,
      pg_catalog.percentile_cont(0.95) WITHIN GROUP (ORDER BY extract(epoch from pg_catalog.now() - s.xact_start)) AS p95_holding_time,
      pg_catalog.sum(extract(epoch from pg_catalog.now() - s.xact_start)) AS holding_time
    FROM 
      pg_catalog.pg_locks AS l
      INNER JOIN 
      pg_catalog.pg_database AS d ON l.database = d.oid
      INNER JOIN 
      pg_catalog.pg_stat_activity AS s ON l.pid = s.pid
    WHERE 
      s.pid != pg_catalog.pg_backend_pid() 
    GROUP BY 
      d.datname;
  metrics:
    - name: datname
      description: database name
      usage: LABEL
    - name: holding_time
      description: database lock holding time
      usage: GAUGE
    - name: p95_holding_time
      description: database lock percentile 95 holding time
      usage: GAUGE
  status: disable
  ttl: 10
  timeout: 9


pg_sql_count:
  name: pg_sql_count
  desc: pg_sql_count
  query: |-
    SELECT 
      pg_catalog.SUM(select_count) AS select, pg_catalog.SUM(update_count) AS update, pg_catalog.SUM(insert_count) AS insert,
      pg_catalog.SUM(delete_count) AS delete, pg_catalog.SUM(mergeinto_count) AS mergeinto,
      pg_catalog.SUM(ddl_count) AS ddl, pg_catalog.SUM(dml_count) AS dml, pg_catalog.SUM(dcl_count) AS dcl
    FROM 
      pg_catalog.gs_sql_count;
  metrics:
    - name: node_name
      description: the name of node
      usage: LABEL
    - name: select
      description: the count of select sql
      usage: GAUGE
    - name: insert
      description: the count of delete sql
      usage: GAUGE
    - name: delete
      description: Table distribution skew variance
      usage: GAUGE
    - name: update
      description: Table distribution skew ratio
      usage: GAUGE
    - name: mergeinto
      description: Table distribution skew ratio
      usage: GAUGE
    - name: ddl
      description: Table distribution skew ratio
      usage: GAUGE
    - name: dml
      description: Table distribution skew ratio
      usage: GAUGE
    - name: dcl
      description: Table distribution skew ratio
      usage: GAUGE
  status: enable
  ttl: 10
  timeout: 9


pg_autovacuum_worker:
  name: pg_autovacuum_worker
  desc: pg_autovacuum_worker
  query: |-
    SELECT 
      datname, extract(epoch from (current_timestamp - xact_start)) AS duration, query
    FROM 
      dbe_perf.global_session_stat_activity 
    WHERE 
      pg_catalog.NOW() - xact_start > INTERVAL '5 second'
      AND 
      application_name = 'AutoVacWorker' 
    LIMIT 10;
  metrics:
    - name: datname
      description: name of database
      usage: LABEL
    - name: duration
      description: duration time of autovacworker
      usage: GAUGE
    - name: query
      description: query
      usage: LABEL
  status: disable
  ttl: 10
  timeout: 9


pg_redo_stat:
  name: pg_redo_stat
  desc: openGauss statistics thread logs playback situation metrics
  query: |- 
    SELECT 
      phyblkwrt, writetim 
    FROM 
      pg_catalog.{redo_stat};
  metrics:
    - name: phyblkwrt
      description: Logs playback process write data number of blocks
      usage: GAUGE
    - name: writetim
      description: Logs playback process write total time
      usage: GAUGE
  status: disable
  ttl: 5
  timeout: 1


pg_global_ckpt_status:
  name: pg_global_ckpt_status
  desc: openGauss all instance checkpoints AND log flushing metrics
  query: |-
    SELECT 
      node_name, ckpt_redo_point, ckpt_clog_flush_num, ckpt_csnlog_flush_num,
      ckpt_multixact_flush_num, ckpt_predicate_flush_num, ckpt_twophase_flush_num,
      1 AS value 
    FROM 
      pg_catalog.local_ckpt_stat();
  metrics:
    - name: node_name
      description: Database process name
      usage: LABEL
    - name: ckpt_redo_point
      description: Checkpoint of current instance
      usage: LABEL
    - name: ckpt_clog_flush_num
      description: The number of clog flush pages from start to current time
      usage: LABEL
    - name: ckpt_csnlog_flush_num
      description: The number of csnlog flashing pages from startup to the current time
      usage: LABEL
    - name: ckpt_multixact_flush_num
      description: The number of multixact flashing pages from the start to the current time
      usage: LABEL
    - name: ckpt_predicate_flush_num
      description: The number of predicate refresh pages from start to current time
      usage: LABEL
    - name: ckpt_twophase_flush_num
      description: The number of pages refreshed by twophase from the start to the current time
      usage: LABEL
    - name: value
      usage: GAUGE
  status: disable
  ttl: 60
  timeout: 1


pg_global_double_write_status:
  name: pg_global_double_write_status
  desc: openGauss all instance file double writing metrics
  query: |-
    SELECT 
      node_name, curr_dwn, curr_start_page, file_trunc_num, 
      file_reset_num, total_writes, low_threshold_writes, 
      high_threshold_writes, total_pages, low_threshold_pages, 
      high_threshold_pages, 
      1 AS value 
    FROM 
      pg_catalog.local_double_write_stat();
  metrics:
    - name: node_name
      description: Database process name
      usage: LABEL
    - name: curr_dwn
      description: The serial number of the current double-written file
      usage: LABEL
    - name: curr_start_pag
      description: The current double-write file restores the actual page
      usage: LABEL
    - name: file_trunc_num
      description: The current double-write file reuse times
      usage: LABEL
    - name: file_reset_num
      description: The number of resets after the current double-write file is full
      usage: LABEL
    - name: total_writes
      description: The total I/O times of the current double-write file
      usage: LABEL
    - name: low_threshold_writes
      description: Low-efficiency write double write file IO number
      usage: LABEL
    - name: high_threshold_writes
      description: High-efficiency write double write file IO times
      usage: LABEL
    - name: total_pages
      description: The total number of pages from the current page to the double-write file area
      usage: LABEL
    - name: low_threshold_pages
      description: Number of pages refreshed inefficiently
      usage: LABEL
    - name: high_threshold_pages
      description: Number of pages refreshed efficiently
      usage: LABEL
    - name: value
      usage: GAUGE
  status: disable
  ttl: 60
  timeout: 1


pg_total_memory_detail:
  name: pg_total_memory_detail
  desc: all kinds of memorytype and detail
  query: |-
    SELECT 
      nodename, memorytype AS type, memorymbytes AS mbytes 
    FROM 
      pg_catalog.{total_memory_detail};
  metrics:
    - name: nodename
      description: every node in this cluster
      usage: LABEL
    - name: type
      description: Name of memorytype
      usage: LABEL
    - name: mbytes
      description: memory type allocates memory size
      usage: GAUGE
  status: enable
  ttl: 60
  timeout: 1


pg_summary_file_iostat:
  name: pg_summary_file_iostat
  desc: openGauss all normal node shared used memory info metrics
  query: |- 
    SELECT 
      CURRENT_CATALOG AS datname, pg_catalog.SUM(phyblkrd) AS total_phyblkrd, pg_catalog.SUM(phyblkwrt) AS total_phyblkwrt
    FROM 
      dbe_perf.summary_file_iostat;
  metrics:
    - name: datname
      description: current database
      usage: LABEL
    - name: total_phyblkrd
      description: Read the number of physical file blocks
      usage: GAUGE
    - name: total_phyblkwrt
      description: Number of physical file blocks written
      usage: GAUGE
  status: enable
  ttl: 10
  timeout: 1


pg_time:
  name: pg_time
  query: |-
    SELECT 
      stat_name name, value 
    FROM 
      dbe_perf.instance_time;
  metrics:
    - name: name
      usage: LABEL
    - name: value
      usage: GAUGE
  status: disable
  ttl: 10
  timeout: 1


pg_thread_pool:
  name: pg_thread_pool
  query: |-
    WITH thread_table AS (
      SELECT 
        pg_catalog.regexp_matches(worker_info, 'default: (\d+) new: (\d+) expect: (\d+) actual: (\d+) idle: (\d+) pending: (\d+)', 'g') as regexp_matches
      FROM 
        dbe_perf.GLOBAL_THREADPOOL_STATUS
    ) 
    SELECT 
      CASE WHEN (pg_catalog.SUM(regexp_matches[4]) IS NULL) THEN 0 ELSE greatest((pg_catalog.SUM(regexp_matches[4]) - pg_catalog.SUM(regexp_matches[5])) / pg_catalog.SUM(regexp_matches[4]), 0) END AS rate
    FROM 
      thread_table;
  metrics:
    - name: rate
      usage: GAUGE
  status: enable
  ttl: 10
  timeout: 1


pg_txid:
  name: pg_txid
  query: SELECT pg_catalog.txid_snapshot_xmin(pg_catalog.txid_current_snapshot()) AS oldestXmin;
  metrics:
    - name: oldestxmin
      usage: Counter
  status: enable
  ttl: 10
  timeout: 1


pg_pagewriter:
  name: pg_pagewriter
  query: |- 
    SELECT 
      SUM(remain_dirty_page_num) AS dirty_page_num 
    FROM 
      dbe_perf.global_pagewriter_status;
  metrics:
    - name: dirty_page_num
      usage: Counter
  status: disable
  ttl: 10
  timeout: 1


pg_summary_user:
  name: pg_summary_user
  query: |-
    SELECT 
      node_name, user_name, user_id, pg_catalog.SUM(login_counter) AS login_counter, pg_catalog.SUM(logout_counter) AS logout_counter
    FROM 
      dbe_perf.summary_user_login 
    GROUP BY 
      node_name, user_name, user_id;
  metrics:
    - name: node_name
      usage: LABEL
    - name: user_name
      usage: LABEL
    - name: user_id
      usage: LABEL
    - name: login_counter
      usage: GAUGE
    - name: logout_counter
      usage: GAUGE
  status: enable
  ttl: 10
  timeout: 1


pg_audit:
  name: opengauss
  desc: opengauss audit info
  query: |-
    SELECT 
      COUNT(
        CASE WHEN type = 'login_success' THEN 1 END
      ) AS successful_logins_total,
      COUNT(
        CASE WHEN type = 'user_logout' THEN 1 END
      ) AS logout_total,
      COUNT(
        CASE WHEN type = 'login_failed' THEN 1 END
      ) AS invalid_logins_total,
      COUNT(
        CASE WHEN type = 'lock_user' THEN 1 END
      ) AS user_locked_total,
      COUNT(
        CASE WHEN type = 'unlock_user' THEN 1 END
      ) AS user_unlocked_total,
      COUNT(
        CASE WHEN type = 'user_violation' THEN 1 END
      ) AS user_violation_total,
      COUNT(
        CASE WHEN type = 'grant_role' THEN 1 END
      ) AS grant_total,
      COUNT(
        CASE WHEN type = 'revoke_role' THEN 1 END
      ) AS revoke_total,
      COUNT(
        CASE WHEN type = 'ddl_user' THEN 1 END
      ) AS ddl_user_total
    FROM (
      SELECT 
        * 
      FROM (
        SELECT 
          * 
        FROM 
          pg_catalog.pg_query_audit(now() - (1 / 24 / 60 / 60) * ({scrape_interval_seconds}), NOW())
      )
      WHERE 
        type IN ('login_success', 'login_failed', 'user_logout', 'lock_user', 'unlock_user', 
                 'user_violation', 'grant_role', 'revoke_role', 'ddl_user')
    ) 
    WHERE 
      username NOT IN (SELECT current_user);
  metrics:
    - name: successful_logins_total
      description: number of successful logins
      usage: COUNTER
      default: 0
      cumulative: 1
    - name: logout_total
      description: number of logouts
      usage: COUNTER
      default: 0
      cumulative: 1
    - name: invalid_logins_total
      description: number of invalid logins
      usage: COUNTER
      default: 0
      cumulative: 1
    - name : user_locked_total
      description: number of user locks
      usage: COUNTER
      default: 0
      cumulative: 1
    - name: user_unlocked_total
      description: number of user unlocks
      usage: COUNTER
      default: 0
      cumulative: 1
    - name: user_violation_total
      description: number of permission denied
      usage: COUNTER
      default: 0
      cumulative: 1
    - name: grant_total
      description: number of grants
      usage: COUNTER
      default: 0
      cumulative: 1
    - name: revoke_total
      description: number of revokes
      usage: COUNTER
      default: 0
      cumulative: 1
    - name: ddl_user_total
      description: number of changes to users
      usage: COUNTER
      default: 0
      cumulative: 1
  status: disable
  ttl: 0
  timeout: 9


pg_logical_replication_slots:
  name: pg_logical_replication_slots
  query: |-
    SELECT
      slot_name, restart_lsn, pg_catalog.get_byte(high_hex, 0)::int * 256 + pg_catalog.get_byte(low_hex, 0)::int as lsn
    FROM (
      SELECT
        slot_name, restart_lsn, pg_catalog.decode(pg_catalog.split_part(restart_lsn, '/', 1), 'hex') as high_hex, pg_catalog.decode(pg_catalog.split_part(restart_lsn, '/', 2), 'hex') as low_hex
      FROM
        pg_catalog.pg_get_replication_slots()
      WHERE
        slot_type = 'logical'
    );
  metrics:
    - name: slot_name
      usage: LABEL
    - name: restart_lsn
      usage: LABEL
    - name: lsn
      usage: GAUGE
  status: enable
  ttl: 10
  timeout: 1
  for_dist_dn: true


pg_long_transaction:
  name: pg_long_transaction
  query: |-
    WITH long_transactions AS (
      SELECT DISTINCT 
        sessionid, unique_sql_id, datname, query_id, query, state, 
        min(xact_start) AS xact_start
      FROM 
        pg_catalog.pg_stat_activity
      WHERE 
        pg_catalog.length(query) > 0 
        AND
        (
          state in ('idle in transaction')
          OR 
          (
            unique_sql_id != 0
            AND 
            state in ('active')
          )
        )
        AND 
        pg_catalog.pg_current_sessid() != sessionid
      GROUP BY
        sessionid, unique_sql_id, datname, query_id, query, state
    )
    SELECT DISTINCT 
      sessionid, unique_sql_id, datname, query_id, query, state, 
      extract(epoch from pg_catalog.NOW() - xact_start)::bigint AS count
    FROM 
      long_transactions 
    WHERE 
      count >= {long_transaction_threshold_seconds};
  metrics:
    - name: sessionid
      usage: LABEL
    - name: unique_sql_id
      usage: LABEL
    - name: datname
      usage: LABEL
    - name: query_id
      usage: LABEL
    - name: query
      usage: LABEL
    - name: state
      usage: LABEL
    - name: count
      usage: GAUGE
  status: enable
  ttl: 10
  timeout: 1


pg_long_xact_mem_ctx:
  name: pg_long_xact_mem_ctx
  query: |-
    WITH long_xact AS (
      SELECT 
        sessionid, unique_sql_id
      FROM 
        pg_catalog.pg_stat_activity
      WHERE 
        xact_start <= pg_catalog.NOW() - INTERVAL '{long_transaction_threshold_seconds} second'
        AND 
        xact_start >= pg_catalog.NOW() - INTERVAL '{long_transaction_threshold_seconds} second' - INTERVAL '{scrape_interval_seconds} second'
        AND
        pg_catalog.pg_current_sessid() != sessionid
        AND 
        state IN ('active', 'idle in transaction')
        AND 
        pg_catalog.length(query) > 0
    )
    SELECT 
      long_xact.sessionid, long_xact.unique_sql_id, ctx.contextname, ctx.usedsize / 1024 / 1024 AS size
    FROM 
      long_xact LEFT JOIN pg_catalog.{session_memory_detail} ctx ON sessionid = pg_catalog.split_part(sessid, '.', 2)
    ORDER BY
      size DESC 
    LIMIT 50;
  metrics:
    - name: sessionid
      usage: LABEL
    - name: unique_sql_id
      usage: LABEL
    - name: contextname
      usage: LABEL
    - name: size
      usage: GAUGE
  status: enable
  ttl: 10
  timeout: 1


pg_temp_files:
  name: pg_temp_files
  query: |-
    WITH temp AS (
      SELECT 
        pg_catalog.SUBSTRING(split_part(name, '.', 1), 10) AS tid,
        COUNT(tid) AS count 
      FROM 
        pg_catalog.pg_ls_tmpdir()
      GROUP BY 
        tid
      ORDER BY
        count DESC
    )
    SELECT
      tid, count, query
    FROM
      temp LEFT JOIN pg_catalog.pg_stat_activity stat ON temp.tid = stat.pid;
  metrics:
    - name: tid
      usage: LABEL
    - name: query
      usage: LABEL
    - name: count
      usage: GAUGE
  status: enable
  ttl: 60
  timeout: 1
  for_dist_dn: true


pg_session_memory_detail:
  name: pg_session_memory_detail
  desc: context detail of session memory
  query: |-
    WITH t1 AS (
      SELECT
        contextname, pg_catalog.SUM(totalsize) as size
      FROM (
        SELECT 
          pg_catalog.regexp_replace(contextname, E'\\d+', '?') AS contextname,
          totalsize
        FROM 
          pg_catalog.{session_memory_detail}
      )
      GROUP BY
        contextname
    ),
    t2 AS (
      SELECT 
        pg_catalog.SUM(size) as total
      FROM
        t1
    )
    SELECT
      contextname, size, rate
    FROM (
      SELECT
        t1.contextname,
        t1.size,
        pg_catalog.ROUND(t1.size / t2.total, 5) as rate,
        pg_catalog.SUM(rate) OVER (ORDER BY t1.size DESC) AS rate_sum
      FROM 
        t1, t2
    )
    WHERE
      rate_sum <= 0.99
    LIMIT 50;
  metrics:
    - name: contextname
      description: name of memorycontext
      usage: LABEL
    - name: size
      description: total size of memorycontext
      usage: GAUGE
    - name: rate
      description: total rate of memorycontext
      usage: GAUGE
  status: enable
  ttl: 600
  timeout: 9
  for_dist_dn: true


pg_shared_memory_detail:
  name: pg_shared_memory_detail
  query: |-
    WITH t1 AS (
      SELECT
        contextname, pg_catalog.SUM(totalsize) as size
      FROM (
        SELECT 
          pg_catalog.regexp_replace(contextname, E'\\d+', '?') AS contextname,
          totalsize
        FROM 
          pg_catalog.{shared_memory_detail}
      )
      GROUP BY
        contextname
    ),
    t2 AS (
      SELECT 
        pg_catalog.SUM(size) as total
      FROM
        t1
    )
    SELECT
      contextname, size, rate
    FROM (
      SELECT
        t1.contextname,
        t1.size,
        pg_catalog.ROUND(t1.size / t2.total, 5) as rate,
        pg_catalog.SUM(rate) OVER (ORDER BY t1.size DESC) AS rate_sum
      FROM 
        t1, t2
    )
    WHERE
      rate_sum <= 0.99
    LIMIT 50;
  metrics:
    - name: contextname
      description: name of memorycontext
      usage: LABEL
    - name: size
      description: total size of memorycontext
      usage: GAUGE
    - name: rate
      description: total rate of memorycontext
      usage: GAUGE
  status: enable
  ttl: 600
  timeout: 9
  for_dist_dn: true


pg_sql_active:
  name: pg_sql_active
  query: |-
    SELECT
      unique_sql_id, extract(epoch from pg_catalog.SUM(run_time))::bigint AS time, pg_catalog.count(unique_sql_id) AS count
    FROM (
      SELECT 
        unique_sql_id,
        pg_catalog.NOW() - query_start as run_time
      FROM
        pg_catalog.pg_stat_activity
      WHERE
        state != 'idle'
        AND
        unique_sql_id != 0
        AND 
        sessionid != pg_catalog.pg_current_sessid()
        AND
        application_name NOT IN ('Asp', 'statement flush thread', 'JobScheduler', 'WDRSnapshot', 'PercentileJob', 'gs_clean', 'DBMind-openGauss-exporter')
    )
    GROUP BY
      unique_sql_id;
  metrics:
    - name: unique_sql_id
      description: unique sql id of statement
      usage: LABEL
    - name: time
      description: total run time of unique sql
      usage: GAUGE
    - name: count
      description: count of unique sql
      usage: GAUGE
  status: enable
  ttl: 10
  timeout: 5
