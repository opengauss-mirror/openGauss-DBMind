# Copyright (c) 2020 Huawei Technologies Co.,Ltd.
#
# openGauss is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#
#          http://license.coscl.org.cn/MulanPSL2
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.
import numpy as np

from dbmind.components.cluster_diagnosis.fault_locating import cn_diagnosis, dn_diagnosis
from dbmind.components.cluster_diagnosis.model.cn_xgboost_model_export import xgb_predict as cn_xgb
from dbmind.components.cluster_diagnosis.model.dn_xgboost_model_export import xgb_predict as dn_xgb
from dbmind.components.cluster_diagnosis.model.cn_xgboost_model import xgb_predict as cn_xgb_new
from dbmind.components.cluster_diagnosis.model.dn_xgboost_model import xgb_predict as dn_xgb_new
from dbmind.components.cluster_diagnosis.xgb_predict import CN_INPUT_ORDER, DN_INPUT_ORDER

cn_samples = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 9],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 11],
    [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],
    [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
    [2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 9],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 5],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 6],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 7],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 8],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8],
    [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 11],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9],
    [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11],
    [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 10],
    [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 9],
    [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6],
    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 7],
    [2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 10],
    [2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 9],
    [3, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
    [3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 11]
]
dn_samples = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 6],
    [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 6],
    [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 11],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10],
    [2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5],
    [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2],
    [5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4],
    [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7],
    [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7],
    [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7],
    [9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8],
    [10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9],
    [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5],
    [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
    [5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4],
    [6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8],
    [10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
]

cn_samples_new = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 9],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 11],
    [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],
    [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
    [2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 9],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 5],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 6],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 7],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 8],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8],
    [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 11],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11],
    [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 10],
    [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 7],
    [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6],
    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 7],
    [2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 10],
    [2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 7],
    [3, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
    [3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 11]
]
dn_samples_new = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 6],
    [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 6],
    [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 11],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10],
    [2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5],
    [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2],
    [5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4],
    [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7],
    [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7],
    [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7],
    [9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8],
    [10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7],
    [10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7]
]


def test_cn_logical_model():
    for sample in cn_samples_new:
        cur_sample = {}
        for i, s in enumerate(CN_INPUT_ORDER):
            cur_sample[s] = sample[i]
        assert cn_diagnosis(cur_sample) == sample[-1]


def test_cn_xgb_model():
    res = cn_xgb(cn_samples, 0.5)
    for i, r in enumerate(res):
        assert np.argmax(r) == cn_samples[i][-1]

    res = cn_xgb_new(cn_samples_new, 0.5)
    for i, r in enumerate(res):
        assert np.argmax(r) == cn_samples_new[i][-1]


def test_dn_logical_model():
    for sample in dn_samples_new:
        cur_sample = {}
        for i, s in enumerate(DN_INPUT_ORDER):
            cur_sample[s] = sample[i]
        assert dn_diagnosis(cur_sample) == sample[-1]


def test_dn_xgb_model():
    res = dn_xgb(dn_samples, 0.5)
    for i, r in enumerate(res):
        assert np.argmax(r) == dn_samples[i][-1]

    res = dn_xgb_new(dn_samples_new, 0.5)
    for i, r in enumerate(res):
        assert np.argmax(r) == dn_samples_new[i][-1]
